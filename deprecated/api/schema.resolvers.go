package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/philipsahli/innominatus-graph/pkg/graph"
)

// Properties is the resolver for the properties field.
func (r *edgeResolver) Properties(ctx context.Context, obj *graph.Edge) (*string, error) {
	if obj.Properties == nil {
		return nil, nil
	}
	jsonData, err := json.Marshal(obj.Properties)
	if err != nil {
		return nil, err
	}
	result := string(jsonData)
	return &result, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *edgeResolver) CreatedAt(ctx context.Context, obj *graph.Edge) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// Nodes is the resolver for the nodes field.
func (r *graphResolver) Nodes(ctx context.Context, obj *graph.Graph) ([]*graph.Node, error) {
	nodes := make([]*graph.Node, 0, len(obj.Nodes))
	for _, node := range obj.Nodes {
		nodes = append(nodes, node)
	}
	return nodes, nil
}

// Edges is the resolver for the edges field.
func (r *graphResolver) Edges(ctx context.Context, obj *graph.Graph) ([]*graph.Edge, error) {
	edges := make([]*graph.Edge, 0, len(obj.Edges))
	for _, edge := range obj.Edges {
		edges = append(edges, edge)
	}
	return edges, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *graphResolver) CreatedAt(ctx context.Context, obj *graph.Graph) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *graphResolver) UpdatedAt(ctx context.Context, obj *graph.Graph) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// Properties is the resolver for the properties field.
func (r *nodeResolver) Properties(ctx context.Context, obj *graph.Node) (*string, error) {
	if obj.Properties == nil {
		return nil, nil
	}
	jsonData, err := json.Marshal(obj.Properties)
	if err != nil {
		return nil, err
	}
	result := string(jsonData)
	return &result, nil
}

// CreatedAt is the resolver for the createdAt field.
func (r *nodeResolver) CreatedAt(ctx context.Context, obj *graph.Node) (string, error) {
	return obj.CreatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *nodeResolver) UpdatedAt(ctx context.Context, obj *graph.Node) (string, error) {
	return obj.UpdatedAt.Format("2006-01-02T15:04:05Z07:00"), nil
}

// Graph is the resolver for the graph field.
func (r *queryResolver) Graph(ctx context.Context, app string) (*graph.Graph, error) {
	return r.repository.LoadGraph(app)
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (*graph.Node, error) {
	// This is a simplified implementation - in practice you might want to load from a specific app
	// For now, we'll need to search across all graphs or require additional context
	return nil, fmt.Errorf("node lookup by ID only not implemented - use graph query with app parameter")
}

// Apps is the resolver for the apps field.
func (r *queryResolver) Apps(ctx context.Context) ([]*App, error) {
	return nil, fmt.Errorf("apps query not implemented in this MVP")
}

// Edge returns EdgeResolver implementation.
func (r *Resolver) Edge() EdgeResolver { return &edgeResolver{r} }

// Graph returns GraphResolver implementation.
func (r *Resolver) Graph() GraphResolver { return &graphResolver{r} }

// Node returns NodeResolver implementation.
func (r *Resolver) Node() NodeResolver { return &nodeResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type edgeResolver struct{ *Resolver }
type graphResolver struct{ *Resolver }
type nodeResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
